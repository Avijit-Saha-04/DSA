#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

// Function to add a node at the front of the list
void addFront(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        newNode->next = *head;
        (*head)->prev = newNode;
        *head = newNode;
    }
    printf("%d added to the front.\n", data);
}

// Function to add a node at the end of the list
void addEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }
    printf("%d added to the end.\n", data);
}

// Function to delete a node from the front of the list
void deleteFront(struct Node** head) {
    if (*head == NULL) {
        printf("List is empty, cannot delete from front.\n");
        return;
    }
    struct Node* temp = *head;gv
    *head = (*head)->next;
    if (*head != NULL) {
        (*head)->prev = NULL;
    }
    printf("%d deleted from the front.\n", temp->data);
    free(temp);
}

// Function to delete a node from the end of the list
void deleteEnd(struct Node** head) {
    if (*head == NULL) {
        printf("List is empty, cannot delete from end.\n");
        return;
    }
    struct Node* temp = *head;
    if (temp->next == NULL) {
        *head = NULL;
    } else {
        while (temp->next != NULL) {
            temp = .temp->next;
        }
        temp->prev->next = NULL;
    }
    printf("%d deleted from the end.\n", temp->data);
    free(temp);
}

// Function to print the list
void printList(struct Node* head) {
    struct Node* temp = head;
    printf("Doubly Linked List: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Main function
int main() {
    struct Node* head = NULL;
    int choice, data;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Add to the front\n");
        printf("2. Add to the end\n");
        printf("3. Delete from the front\n");
        printf("4. Delete from the end\n");
        printf("5. Display the list\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to add to the front: ");
                scanf("%d", &data);
                addFront(&head, data);
                break;
            case 2:
                printf("Enter the element to add to the end: ");
                scanf("%d", &data);
                addEnd(&head, data);
                break;
            case 3:
                deleteFront(&head);
                break;
            case 4:
                deleteEnd(&head);
                break;
            case 5:
                printList(head);
                break;
            case 6:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
